// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 
    //15 i: instruction bit, A or C
    //14 X
    //13 X      unused in C, 
    //12 a      A or M select
    //11 c_zx   zero the x input 
    //10 c_nx 
    //9  c_zy 
    //8  c_ny 
    //7  c_f 
    //6  c_no 
    //5  d_a 
    //4  d_d
    //3  d_m
    //2  j_<
    //1  j_=
    //0  j_>

    // A or C instruction bit
    DMux(in=true, sel=instruction[15], a=ab, b=cb);

    // A register gets a new value on an A or a C with d_a bit
    And(a=cb, b=instruction[5], out=w1);
    Or(a=w1, b=ab, out=Aload);
    
    // Value comes from A or C 
    Mux16(a=ALUout, b=instruction, sel=ab, out=Ain);
    ARegister(in=Ain, load=Aload, out=Aout, out[0..14]=addressM);

    // Write to M
    And(a=cb, b=instruction[3], out=writeM);

    // A/M Input
    Mux16(a=Aout, b=inM, sel=instruction[12], out=amo);
    ALU(x=do, y=amo, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7],  no=instruction[6],  
        out=ALUout, out=outM, zr=zrOut, ng=ngOut);

    // D register
    And(a=cb, b=instruction[4], out=Dload);
    DRegister(in=ALUout, load=Dload, out=do);

    // Jump logic

    And(a=ngOut, b=instruction[2], out=jlt);
    And(a=zrOut, b=instruction[1], out=jeq);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=ngOut, b=zrOut, out=j1);
    Not(in=j1, out=gth);
    And(a=gth, b=instruction[0], out=jgt);
    Or(a=jle, b=jgt, out=jmp);
    And(a=cb, b=jmp, out=PCLoad);

    // Program Counter
    PC(in=Aout, load=PCLoad, inc=true, reset=reset, out[0..14]=pc);
}
