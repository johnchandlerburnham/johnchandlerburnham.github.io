---
title: Example post
author: jcb
tags: foo, bar1
---

$$
\require{enclose}
\begin{array}{rll}
   32 \enclose{longdiv}{487}\kern-.2ex \\[-3pt]
  \end{array}
$$

Mauris in lorem nisl. Maecenas tempus facilisis ante, eget viverra nisl
tincidunt et. Donec turpis lectus, mattis ac malesuada a, accumsan eu libero.
Morbi condimentum, tortor et tincidunt ullamcorper, sem quam pretium nulla, id
convallis lectus libero nec turpis. Proin dapibus nisi id est sodales nec
ultrices tortor pellentesque.

Vivamus vel nisi ac lacus sollicitudin vulputate
ac ut ligula. Nullam feugiat risus eget eros gravida in molestie sapien euismod.
Nunc sed hendrerit orci. Nulla mollis consequat lorem ac blandit. Ut et turpis
mauris. Nulla est odio, posuere id ullamcorper sit amet, tincidunt vel justo.
Curabitur placerat tincidunt varius. Nulla vulputate, ipsum eu consectetur
mollis, dui nibh aliquam neque, at ultricies leo ligula et arcu.

An h1 header
============

Paragraphs are separated by a blank line.

2nd paragraph. *Italic*, **bold**, and `monospace`. Itemized lists
look like:

  * this one
  * that one
  * the other one

Note that --- not considering the asterisk --- the actual text
content starts at 4-columns in.

> Block quotes are
> written like so.
>
> They can span multiple paragraphs,
> if you like.

Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., "it's all
in chapters 12--14"). Three dots ... will be converted to an ellipsis.
Unicode is supported. ☺



An h2 header
------------

Here's a numbered list:

 1. first item
 2. second item
 3. third item

Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here's a code sample:

    # Let me re-iterate ...
    for i in 1 .. 10 { do-something(i) }

As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:

```
define foobar() {
    print "Welcome to flavor country!";
}
```

```haskell 
{-# LANGUAGE ExistentialQuantification #-}
module Main where
-- This is a comment with 80 characters in it.........................*........
main :: IO ()
import System.Random  -- give us a way to generate random numbers!

data CardNumber = Two   | Three | Four | Five | Six
                | Seven | Eight | Nine | Ten  | Knight 
                | Queen | King  | Ace
                deriving (Bounded, Enum, Eq)
```

``` {#mycode .haskell .numberLines startFrom="1"}
{-# LANGUAGE ExistentialQuantification #-}
module Main where
-- This is a comment with 80 characters in it.........................*........
main :: IO ()
import System.Random  -- give us a way to generate random numbers!

data CardNumber = Two   | Three | Four | Five | Six
                | Seven | Eight | Nine | Ten  | Knight 
                | Queen | King  | Ace
                deriving (Bounded, Enum, Eq)

data CardSuit   = Club | Heart | Diamond | Spade deriving (Bounded, Enum, Eq)

data Card = Card CardNumber CardSuit deriving (Eq)

type Deck = [Card]

instance Show CardNumber where
  show Two    = "2"
  show Three  = "3"
  show Four   = "4"
  show Five   = "5"
  show Six    = "6"
  show Seven  = "7"
  show Eight  = "8"
  show Nine   = "9"
  show Ten    = "10"
  show Knight = "Kn"
  show Queen  = "Q"
  show King   = "K"
  show Ace    = "A"

instance Show CardSuit where
  show Club    = "♣"
  show Heart   = "♥"
  show Diamond = "♦"
  show Spade   = "♠"

instance Show Card where
  show (Card n s) = (show n) ++ (show s)

{--
draw :: Deck -> (Card, Deck)
draw [] = undefined
draw (x:xs) = (x, xs)
--}

draw :: Deck -> (Card, Deck)
draw xs = (head $ fst l, snd l)
  where l = drawN 1 xs

drawN :: Int -> Deck -> (Deck, Deck)
drawN _ [] = undefined
drawN n xs
    | n > length xs = undefined
    | otherwise     = (take n xs, drop n xs)

countDeck :: Deck -> Int
countDeck cards = length cards

deck :: Deck
deck = reverse $ deck' [Card Two Club]

deck' :: Deck -> Deck
deck' (f@(Card Ace Spade):l) = f : l
deck' (f@(Card  cn Spade):l) = deck' (Card (succ cn)     Club  : f : l)
deck' (f@(Card  cn    ct):l) = deck' (Card       cn  (succ ct) : f : l)

main = do
          print deck
          print $ length deck 
          print (Card Two Club == Card Two Heart)
          print (Card Two Club == Card Two Heart)
          print $ countDeck [Card Two Club, Card Two Heart]
          print $ draw deck
          print $ drawN 10 (deck)



-- Some notes about design
{-
We will treat a deck of cards as a simple haskell list of cards.  We are going
to consider the "top" of the deck to be the front of a singly linked list That
is top (x:xs) = x That  means the bottom of the deck will be the last element
of the list. In haskell terms we will call the bottom of the deck the same as
bottom xs = last xs
-}

```

(which makes copying & pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:

~~~python
import time
# Quick, count to ten!
for i in range(10):
    # (but not *too* quick)
    time.sleep(0.5)
    print i
~~~



### An h3 header ###

Now a nested list:

 1. First, get these ingredients:

      * carrots
      * celery
      * lentils

 2. Boil some water.

 3. Dump everything in the pot and follow
    this algorithm:

        find wooden spoon
        uncover pot
        stir
        cover pot
        balance wooden spoon precariously on pot handle
        wait 10 minutes
        goto first step (or shut off burner when done)

    Do not bump wooden spoon or it will fall.

Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).

Here's a link to [a website](http://foo.bar), to a [local
doc](local-doc.html), and to a [section heading in the current
doc](#an-h2-header). Here's a footnote [^1].

[^1]: Footnote text goes here.

Tables can look like this:

size  material      color
----  ------------  ------------
9     leather       brown
10    hemp canvas   natural
11    glass         transparent

Table: Shoes, their sizes, and what they're made of

(The above is the caption for the table.) Pandoc also supports
multi-line tables:

--------  -----------------------
keyword   text
--------  -----------------------
red       Sunsets, apples, and
          other red or reddish
          things.

green     Leaves, grass, frogs
          and other things it's
          not easy being.
--------  -----------------------

A horizontal rule follows.

***




Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:

$$I = \int \rho R^{2} dV$$

And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: \`foo\`, \*bar\*, etc.:
